// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistClient is the client API for Playlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistClient interface {
	SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResponseWithCode, error)
	SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResponseWithCode, error)
	DownloadTrack(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (Playlist_DownloadTrackClient, error)
	ListOfTracks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Playlist_ListOfTracksClient, error)
	AddSong(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*ResponseWithCode, error)
	DeleteSong(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*ResponseWithCode, error)
	Next(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseWithCode, error)
	Prev(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseWithCode, error)
}

type playlistClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistClient(cc grpc.ClientConnInterface) PlaylistClient {
	return &playlistClient{cc}
}

func (c *playlistClient) SignIn(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) SignUp(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) DownloadTrack(ctx context.Context, in *TrackRequest, opts ...grpc.CallOption) (Playlist_DownloadTrackClient, error) {
	stream, err := c.cc.NewStream(ctx, &Playlist_ServiceDesc.Streams[0], "/api.Playlist/DownloadTrack", opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistDownloadTrackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Playlist_DownloadTrackClient interface {
	Recv() (*TrackResponse, error)
	grpc.ClientStream
}

type playlistDownloadTrackClient struct {
	grpc.ClientStream
}

func (x *playlistDownloadTrackClient) Recv() (*TrackResponse, error) {
	m := new(TrackResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playlistClient) ListOfTracks(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (Playlist_ListOfTracksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Playlist_ServiceDesc.Streams[1], "/api.Playlist/ListOfTracks", opts...)
	if err != nil {
		return nil, err
	}
	x := &playlistListOfTracksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Playlist_ListOfTracksClient interface {
	Recv() (*ListResponse, error)
	grpc.ClientStream
}

type playlistListOfTracksClient struct {
	grpc.ClientStream
}

func (x *playlistListOfTracksClient) Recv() (*ListResponse, error) {
	m := new(ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playlistClient) AddSong(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) DeleteSong(ctx context.Context, in *PosRequest, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) Next(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) Prev(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResponseWithCode, error) {
	out := new(ResponseWithCode)
	err := c.cc.Invoke(ctx, "/api.Playlist/Prev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServer is the server API for Playlist service.
// All implementations must embed UnimplementedPlaylistServer
// for forward compatibility
type PlaylistServer interface {
	SignIn(context.Context, *AuthRequest) (*ResponseWithCode, error)
	SignUp(context.Context, *AuthRequest) (*ResponseWithCode, error)
	DownloadTrack(*TrackRequest, Playlist_DownloadTrackServer) error
	ListOfTracks(*ListRequest, Playlist_ListOfTracksServer) error
	AddSong(context.Context, *PosRequest) (*ResponseWithCode, error)
	DeleteSong(context.Context, *PosRequest) (*ResponseWithCode, error)
	Next(context.Context, *Empty) (*ResponseWithCode, error)
	Prev(context.Context, *Empty) (*ResponseWithCode, error)
	mustEmbedUnimplementedPlaylistServer()
}

// UnimplementedPlaylistServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServer struct {
}

func (UnimplementedPlaylistServer) SignIn(context.Context, *AuthRequest) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedPlaylistServer) SignUp(context.Context, *AuthRequest) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedPlaylistServer) DownloadTrack(*TrackRequest, Playlist_DownloadTrackServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadTrack not implemented")
}
func (UnimplementedPlaylistServer) ListOfTracks(*ListRequest, Playlist_ListOfTracksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOfTracks not implemented")
}
func (UnimplementedPlaylistServer) AddSong(context.Context, *PosRequest) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistServer) DeleteSong(context.Context, *PosRequest) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlaylistServer) Next(context.Context, *Empty) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (UnimplementedPlaylistServer) Prev(context.Context, *Empty) (*ResponseWithCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prev not implemented")
}
func (UnimplementedPlaylistServer) mustEmbedUnimplementedPlaylistServer() {}

// UnsafePlaylistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServer will
// result in compilation errors.
type UnsafePlaylistServer interface {
	mustEmbedUnimplementedPlaylistServer()
}

func RegisterPlaylistServer(s grpc.ServiceRegistrar, srv PlaylistServer) {
	s.RegisterService(&Playlist_ServiceDesc, srv)
}

func _Playlist_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).SignIn(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).SignUp(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_DownloadTrack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrackRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaylistServer).DownloadTrack(m, &playlistDownloadTrackServer{stream})
}

type Playlist_DownloadTrackServer interface {
	Send(*TrackResponse) error
	grpc.ServerStream
}

type playlistDownloadTrackServer struct {
	grpc.ServerStream
}

func (x *playlistDownloadTrackServer) Send(m *TrackResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Playlist_ListOfTracks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaylistServer).ListOfTracks(m, &playlistListOfTracksServer{stream})
}

type Playlist_ListOfTracksServer interface {
	Send(*ListResponse) error
	grpc.ServerStream
}

type playlistListOfTracksServer struct {
	grpc.ServerStream
}

func (x *playlistListOfTracksServer) Send(m *ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Playlist_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).AddSong(ctx, req.(*PosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).DeleteSong(ctx, req.(*PosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).Next(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_Prev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).Prev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Playlist/Prev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).Prev(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Playlist_ServiceDesc is the grpc.ServiceDesc for Playlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Playlist",
	HandlerType: (*PlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Playlist_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Playlist_SignUp_Handler,
		},
		{
			MethodName: "AddSong",
			Handler:    _Playlist_AddSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _Playlist_DeleteSong_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _Playlist_Next_Handler,
		},
		{
			MethodName: "Prev",
			Handler:    _Playlist_Prev_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadTrack",
			Handler:       _Playlist_DownloadTrack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListOfTracks",
			Handler:       _Playlist_ListOfTracks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
